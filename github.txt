https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging 

 

Other name for Version Control is Software Configuration Management. 

It is a process of tracking and controlling the changes in the software. 

SCM tools: Subversion, GIT,Clearcase,CVS,perforce. 

SCM tool terminology: 

Repositories 

Client 

Server 

Workspace 

Branch 

Checkin 

Version 

Tag 

 

Repository: A directory where you store entire code of a product. 

Server: where you store all your repositories wherein all the metadata 
information 

Workspace: Is a directory or place in your current server, you need to 
install a client to create a workspace 

Client: Client is a Interface between workspace and a server 

Branching: For parallel development. Example:Mobile Application. Branch 
is a window, point to particular change. 

Checkin: whatever the changes that you have done put it back to 
corresponding repository or corresponding branch will be permanently 
stored on a server. 

Version: it can identify what exactly you have checkedin. Version is id 
: identification for the changes what you have made. 

Working Directory: is a mirror of a branch that you are interested to 
work on. 

 

Centralized Model: 

 

Client changes are saved to the central Server and client cannot share 
the changes with other clients. They  will not have their own 
repositories. In centralized model each repository will have only one 
branch. 

 

Drawbacks of Centralized Model: Speed, Cannot support non-linear 
development, No Distributed 

 

Distributed Model: 

Client will have their own workspace and in that workspace each client 
will have their own repository, so any changes made will update in the 
own repository and he can share with server Computer(only for sharing, 
where it will have it's own repository). And client can share his 
changes with other clients as well. And user can create any number of 
branches for each repositories. 

 

Git Uses Snapshots: 

 

Snapshot: It represents some data of a particular time. 

 

Everytime you try to modify the data it will try to take the delta. 
Delta: What is the data that we have previously and what is the data 
trying to modify. Each time you modify the data it will take the 
snapshot of the delta. It will reduce the space that is used and perform 
the operations quicker. 

 

Git Uses Checksum: 

 

When you do some changes and submit it back to the repository to store 
it permanently we call it commit. For every commit there will be an ID.  
Whenever you submit a change or commit a change it is going to create a 
ID. ID is 40 long digits. Git uses concept of checksum using this 
concept it generates 40 digit ID. ID represents a snapshot, who created 
the file, who modified the file, metainfo and the timestamp. 

 

A Local Git(Workspace) has the three areas: 

 

Working Directory: It's the place where you can see all the files and 
you will have all the modified files. All the files that are modified 
are not necessarily updated to the Repository. 

Staging Directory: Buffer area, after pushing the files from the working 
directory. It will store in the working directory.  

Git Directory (repository): All the committed files are stored in the 
repository. 

 

Git file lifecycle: 

 

Untracked -> unModified -> Modified -> Staged -> unModified 

 

Github.com is a online storage for the git repositories 

 

git config –list : default list of the configurations 

git config –global user.name "sidhartha" 

git config –global user.email sidhartha.kotha@gmail.com 

git config –global push.default simple 

 

Creating a new repository: two kinds of repositories: 1. Bare 
repository(central repository): store and share files but no 
modifications. Command for creating a new repository:  git init --bare 
2. Non-bare repository(local repositories): Users can do modifications 
for files. 

Command for creating a new repository: git init 

 

Bare repositories do not have a working copy and you can push to 
them.So, in short, you can't push to a non-bare repository.  

 

(git pull) is the command for which you will use to sync or update your 
workspace with respect to the latest commit id or changes present in the 
central repository. 

 

Ignoring and viewing logs: .gitignore(we will put all the unwanted files 
eg: *.class, *.log), git log, git log –number, git shortlog, git log 
--oneline. 

 

Branching: 

git branch : it lists all your branches 

git branch branchname : to create a new branch 

git checkout branchname: to switch to the other branch   

Any changes that you do is local to that branch. 


 

You cannot merge between branches of a different repository. 

git merge: git merge new_branch master(to merge the contents between 
new_branch to the master branch) 

Merge conflicts: developers need to fix it. 

 

Stashing Commited Changes: 

 

When you take the backup and at the same time you want to go back to the 
previous content you will follow the concept of stashing in Git.  

Stash is used for the backup and reverting back the changes.  

 

git stash 

git stash list: to check the stash list. 

Git stores the stash as an array. Stash array. 

git stash apply stash{1} 

git stash pop (stash will remove the entry in the array)   

 

Reverting Changes: 

git reset <file> 

git reset –soft : Move only to Head Pointer 

git reset –mixed: Move the head pointer & reset the staging area 

git reset –hard:Move the head pointer, resets staging area & working 
tree to the new head 

git checkout <commitid>: traverse between the commit id of the same 
branch 

git clean : will remove all the untracked files without showing the 
untracked files  

git clean –n : to verify the untracked files 

git clean –f : to remove the untracked files 

 

Git tags: 

 

Tags acts as a quick reference to the particular commit id. 

 

Apply a tag to a commit: git tag -a pattern -m "comment" <commitid> 

Display list of tags: git tag 

Delete a tag: git tag -d <tag> 

 

Git bisect: 

 

Devops provides automation with respect to build management 

git bisect start <good> <bad> 

Git bisect run ./<scriptname> <filename> 

 

Git hooks: 

  

 
